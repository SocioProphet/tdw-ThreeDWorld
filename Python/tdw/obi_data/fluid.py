from pkg_resources import resource_filename
from pathlib import Path
from json import loads
from typing import Dict


class Fluid:
    """
    Data for an Obi fluid. For more information, [read this](http://obi.virtualmethodstudio.com/manual/6.3/emittermaterials.html).
    """

    def __init__(self, atmospheric_drag: float, atmospheric_pressure: float, buoyancy: float, capacity: int,
                 color: Dict[str, float], diffusion: float, diffusion_data: Dict[str, float], resolution: float,
                 rest_density: float, smoothing: float, surface_tension: float, viscosity: float, vorticity: float):
        """
        :param atmospheric_drag: The amount of air resistance.
        :param atmospheric_pressure: The amount of inward pressure applied by air on the surface of the fluid.
        :param buoyancy: Controls the relative density between the fluid and the surrounding air.
        :param capacity: The maximum amount of emitted particles.
        :param color: The visual color of the fluid.
        :param diffusion: A diffusion value that will modify `diffusion_data`. [Read this for more information.](http://obi.virtualmethodstudio.com/manual/6.3/particlediffusion.html)
        :param diffusion_data: A dictionary of four floats that can be used arbitrarily, for example to colorize a fluid based on its physical state. [Read this for more information.](http://obi.virtualmethodstudio.com/manual/6.3/particlediffusion.html)
        :param resolution: The size and amount of particles in 1 cubic meter.
        :param rest_density: The fluid density in kg/m3.
        :param smoothing: A rendering parameter that controls the radius of the particle.
        :param surface_tension: Increasing this value will make the fluid try to minimize its surface area, causing spherical drops to form.
        :param viscosity: Viscosity smooths out the velocity field generated by fluid particles when moving.
        :param vorticity: Amount of vorticity confinement, it will contribute to maintain vortical details in the fluid.
        """

        """:field
        The amount of air resistance.
        """
        self.atmospheric_drag: float = atmospheric_drag
        """:field
        The amount of inward pressure applied by air on the surface of the fluid.
        """
        self.atmospheric_pressure: float = atmospheric_pressure
        """:field
        Controls the relative density between the fluid and the surrounding air.
        """
        self.buoyancy: float = buoyancy
        """:field
        The maximum amount of emitted particles.
        """
        self.capacity: int = capacity
        """:field
        The visual color of the fluid.
        """
        self.color: Dict[str, float] = color
        """:field
        A diffusion value that will modify `diffusion_data`. [Read this for more information.](http://obi.virtualmethodstudio.com/manual/6.3/particlediffusion.html)
        """
        self.diffusion: float = diffusion
        """:field
        A dictionary of four floats that can be used arbitrarily, for example to colorize a fluid based on its physical state. [Read this for more information.](http://obi.virtualmethodstudio.com/manual/6.3/particlediffusion.html)
        """
        self.diffusion_data: Dict[str, float] = diffusion_data
        """:field
        The size and amount of particles in 1 cubic meter.
        """
        self.resolution: float = resolution
        """:field
        The fluid density in kg/m3.
        """
        self.rest_density: float = rest_density
        """:field
        A rendering parameter that controls the radius of the particle.
        """
        self.smoothing: float = smoothing
        """:field
        Increasing this value will make the fluid try to minimize its surface area, causing spherical drops to form.
        """
        self.surface_tension: float = surface_tension
        """:field
        Viscosity smooths out the velocity field generated by fluid particles when moving.
        """
        self.viscosity: float = viscosity
        """:field
        Amount of vorticity confinement, it will contribute to maintain vortical details in the fluid.
        """
        self.vorticity: float = vorticity

    def to_dict(self) -> dict:
        """
        :return: A JSON dictionary of this object.
        """

        d = {k: v for k, v in self.__dict__.items()}
        return d


def __get() -> Dict[str, Fluid]:
    data = loads(Path(resource_filename(__name__, "data/fluids.json")).read_text())
    materials = dict()
    for k in data:
        materials[k] = Fluid(**data[k])
    return materials


FLUIDS: Dict[str, Fluid] = __get()
